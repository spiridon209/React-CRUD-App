{"version":3,"sources":["redux/redusers/auth.js","redux/actions/actionTypes.js","redux/redusers/rootReduser.js","serviceWorker.js","api/authRequest.js","api/rootApiUrl.js","redux/actions/auth.js","components/RegForm/formSchema.js","components/ServerErrors/ServerErrors.jsx","components/RegForm/RegForm.jsx","components/AuthForm/AuthForm.jsx","components/UserBio/UserBio.jsx","App.jsx","index.jsx"],"names":["initialState","token","username","email","id","errors","isProcessing","authReduser","state","action","type","payload","combineReducers","auth","authReducer","Boolean","window","location","hostname","match","authUrl","authFetch","data","a","axios","post","user","response","regUrl","regFetch","authRequest","authSuccess","isLogIn","authFailure","formSchema","Yup","shape","max","required","password","min","matches","connect","serverErrors","props","errorsList","className","Object","keys","map","error","index","key","_","uniqueId","WarningTwoTone","twoToneColor","initialValues","isAuth","dispatch","regFunc","mail","name","localStorage","setItem","reg","resetErrorsFunc","renderInput","label","values","handleChange","handleBlur","touched","htmlFor","placeholder","onChange","onBlur","value","style","borderColor","validationSchema","onSubmit","actions","resetForm","handleSubmit","loading","htmlType","to","process","onClick","authFunc","logOutFunc","logOutHandler","removeItem","path","component","UserBio","exact","RegForm","AuthForm","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","rootReducer","applyMiddleware","thunk","app","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.4411e25b.chunk.js","sourcesContent":["import {\n  AUTH_REQUEST,\n  AUTH_FAILURE,\n  AUTH_SUCCESS,\n  LOG_OUT,\n  RESET_ERRORS,\n} from '../actions/actionTypes';\n\nconst initialState = {\n  token: null,\n  username: '',\n  email: '',\n  id: null,\n  errors: '',\n  isProcessing: false,\n};\n\nconst authReduser = (state = initialState, action) => {\n  switch (action.type) {\n    case AUTH_REQUEST: {\n      const {\n        payload: { isProcessing },\n      } = action;\n      return { ...state, isProcessing };\n    }\n\n    case AUTH_SUCCESS: {\n      const { payload } = action;\n      return { ...state, ...payload };\n    }\n\n    case AUTH_FAILURE: {\n      const {\n        payload: { errors, isProcessing },\n      } = action;\n      return { ...state, errors, isProcessing };\n    }\n\n    case LOG_OUT:\n    case RESET_ERRORS:\n      return initialState;\n\n    default:\n      return state;\n  }\n};\n\nexport default authReduser;\n","export const AUTH_REQUEST = 'AUTH_REQUEST';\nexport const AUTH_FAILURE = 'AUTH_FAILURE';\nexport const AUTH_SUCCESS = 'AUTH_SUCCES';\n\nexport const LOG_OUT = 'LOG_OUT';\nexport const RESET_ERRORS = 'RESET_ERRORS';\n","import { combineReducers } from 'redux';\nimport authReducer from './auth';\n\nexport default combineReducers({\n  auth: authReducer,\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios';\nimport rootApiUrl from './rootApiUrl';\n\nconst authUrl = `${rootApiUrl}/users/login`;\n\nexport const authFetch = async (data) => {\n  const response = await axios.post(authUrl, {\n    user: data,\n  });\n  return response;\n};\n\nconst regUrl = `${rootApiUrl}/users/`;\n\nexport const regFetch = async (data) => {\n  const response = await axios.post(regUrl, {\n    user: data,\n  });\n  return response;\n};\n","const rootApiUrl = 'https://conduit.productionready.io/api/';\n\nexport default rootApiUrl;\n","import { authFetch, regFetch } from '../../api/authRequest';\nimport { AUTH_REQUEST, AUTH_FAILURE, AUTH_SUCCESS, LOG_OUT, RESET_ERRORS } from './actionTypes';\n\nexport const authRequest = (isProcessing) => {\n  return {\n    type: AUTH_REQUEST,\n    payload: { isProcessing },\n  };\n};\n\nexport const authSuccess = (username, email, token, id, isLogIn = true, isProcessing = false) => {\n  return {\n    type: AUTH_SUCCESS,\n    payload: { username, email, token, id, isLogIn, isProcessing },\n  };\n};\n\nexport const authFailure = (errors, isProcessing = false) => {\n  return { type: AUTH_FAILURE, payload: { errors, isProcessing } };\n};\n\nexport const auth = (mail, password) => {\n  return async (dispatch) => {\n    dispatch(authRequest(true));\n    try {\n      const response = await authFetch({ email: mail, password });\n      const { username, email, token, id } = response.data.user;\n      localStorage.setItem('token', token);\n      localStorage.setItem('userId', id);\n      dispatch(authSuccess(username, email, token, id));\n    } catch (err) {\n      dispatch(authFailure(err.response.data.errors));\n    }\n  };\n};\n\nexport const reg = (mail, password, name) => {\n  return async (dispatch) => {\n    dispatch(authRequest(true));\n    try {\n      const response = await regFetch({\n        username: name,\n        email: mail,\n        password,\n      });\n      const { username, email, token, id } = response.data.user;\n      localStorage.setItem('token', token);\n      localStorage.setItem('userId', id);\n      dispatch(authSuccess(username, email, token, id));\n    } catch (err) {\n      dispatch(authFailure(err.response.data.errors));\n    }\n  };\n};\n\nexport const logOut = () => {\n  return {\n    type: LOG_OUT,\n  };\n};\n\nexport const resetErrors = () => {\n  return {\n    type: RESET_ERRORS,\n  };\n};\n","import * as Yup from 'yup';\n\nconst formSchema = Yup.object().shape({\n  username: Yup.string().max(20, 'Must be shorter').required('Required'),\n  email: Yup.string().email('Invalid email address').required('Required'),\n  password: Yup.string()\n    .min(8, 'Must be longer than 8 characters')\n    .max(40, 'Must be shorter')\n    .matches(\n      /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,}$/,\n      'Must have one Big or more letter and one or more number'\n    )\n    .required('Required'),\n});\nexport default formSchema;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { WarningTwoTone } from '@ant-design/icons';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport './ServerErrors.scss';\n\nconst ServerErrors = (props) => {\n  const { serverErrors } = props;\n\n  if (!serverErrors) {\n    return null;\n  }\n\n  const errorsList = (\n    <ul className=\"ServerErrors\">\n      {Object.keys(serverErrors).map((error, index) => (\n        <li key={_.uniqueId(index)} className=\"ServerErrors-Item\">\n          <WarningTwoTone twoToneColor=\"#cf1322\" />\n          <span className=\"ServerErrors-ItemText\">{`${error}: ${serverErrors[error]}`}</span>\n        </li>\n      ))}\n    </ul>\n  );\n\n  return <div className=\"ServerErrorsWrap\">{errorsList}</div>;\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    serverErrors: state.auth.errors,\n  };\n};\n\nServerErrors.propTypes = {\n  serverErrors: PropTypes.oneOfType([PropTypes.string, PropTypes.object]).isRequired,\n};\n\nexport default connect(mapStateToProps)(ServerErrors);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Input, Button } from 'antd';\nimport { NavLink } from 'react-router-dom';\nimport { Formik, Form } from 'formik';\nimport PropTypes from 'prop-types';\nimport { reg, resetErrors } from '../../redux/actions/auth';\nimport formSchema from './formSchema';\nimport ServerErrors from '../ServerErrors/ServerErrors';\n\nconst initialValues = {\n  username: '',\n  email: '',\n  password: '',\n};\n\nconst RegForm = (props) => {\n  const { isAuth, regFunc, resetErrorsFunc, isProcessing } = props;\n\n  const renderInput = (name, type, label, values, handleChange, handleBlur, errors, touched) => (\n    <label className=\"Form-Label\" htmlFor={name}>\n      {`${label}`}\n      <Input\n        className=\"Form-Field\"\n        type={type}\n        name={name}\n        placeholder={label}\n        id={name}\n        onChange={handleChange}\n        onBlur={handleBlur}\n        value={values[name]}\n        style={touched[name] && errors[name] ? { borderColor: 'red' } : {}} //\n      />\n      {touched[name] && errors[name] && <div className=\"Form-RequredField\">{errors[name]}</div>}\n    </label>\n  );\n\n  const renderForm = () => {\n    return (\n      <>\n        <h1>Signup Page</h1>\n        <div className=\"FormWrapper\">\n          <Formik\n            initialValues={initialValues}\n            validationSchema={formSchema}\n            onSubmit={(values, actions) => {\n              const { email, password, username } = values;\n              regFunc(email, password, username);\n              if (isAuth) {\n                actions.resetForm(initialValues);\n              }\n            }}\n          >\n            {({ values, handleChange, errors, touched, handleBlur, handleSubmit }) => (\n              <Form className=\"Form\" onSubmit={handleSubmit}>\n                {renderInput(\n                  'username',\n                  'text',\n                  'User Name',\n                  values,\n                  handleChange,\n                  handleBlur,\n                  errors,\n                  touched\n                )}\n                {renderInput(\n                  'email',\n                  'email',\n                  'Email',\n                  values,\n                  handleChange,\n                  handleBlur,\n                  errors,\n                  touched\n                )}\n                {renderInput(\n                  'password',\n                  'password',\n                  'Password',\n                  values,\n                  handleChange,\n                  handleBlur,\n                  errors,\n                  touched\n                )}\n                <Button\n                  loading={isProcessing}\n                  className=\"SubmitBtn Btn\"\n                  type=\"primary\"\n                  htmlType=\"submit\"\n                >\n                  Sign up\n                </Button>\n                <ServerErrors />\n              </Form>\n            )}\n          </Formik>\n          <NavLink to={`${process.env.PUBLIC_URL}/login`} onClick={resetErrorsFunc}>\n            Log in\n          </NavLink>\n        </div>\n      </>\n    );\n  };\n\n  return renderForm();\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    isAuth: !!state.auth.token,\n    isProcessing: state.auth.isProcessing,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  regFunc: (email, password, username) => dispatch(reg(email, password, username)),\n  resetErrorsFunc: () => dispatch(resetErrors()),\n});\n\nRegForm.propTypes = {\n  regFunc: PropTypes.func,\n  isProcessing: PropTypes.bool,\n  resetErrorsFunc: PropTypes.func,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RegForm);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Input, Button } from 'antd';\nimport { NavLink } from 'react-router-dom';\nimport { Formik, Form } from 'formik';\nimport PropTypes from 'prop-types';\nimport { auth, resetErrors } from '../../redux/actions/auth';\n// import formSchema from './formSchema';\nimport ServerErrors from '../ServerErrors/ServerErrors';\n\nconst initialValues = { email: '', password: '' };\n\nconst AuthForm = (props) => {\n  const { isAuth, authFunc, resetErrorsFunc, isProcessing } = props;\n\n  const renderInput = (name, type, label, values, handleChange, handleBlur, errors, touched) => (\n    <label className=\"Form-Label\" htmlFor={name}>\n      {`${label}`}\n      <Input\n        className=\"Form-Field\"\n        type={type}\n        name={name}\n        placeholder={label}\n        id={name}\n        onChange={handleChange}\n        onBlur={handleBlur}\n        value={values[name]}\n        style={touched[name] && errors[name] ? { borderColor: 'red' } : {}} //\n      />\n      {touched[name] && errors[name] && <div className=\"Form-RequredField\">{errors[name]}</div>}\n    </label>\n  );\n\n  const renderForm = () => {\n    return (\n      <>\n        <h1>Login Page</h1>\n        <div className=\"FormWrapper\">\n          <Formik\n            initialValues={initialValues}\n            onSubmit={(values, actions) => {\n              const { email, password } = values;\n              authFunc(email, password);\n              if (isAuth) {\n                actions.resetForm(initialValues);\n              }\n            }}\n          >\n            {({ values, handleChange, errors, touched, handleBlur, handleSubmit }) => (\n              <Form className=\"Form\" onSubmit={handleSubmit}>\n                {renderInput(\n                  'email',\n                  'email',\n                  'Email',\n                  values,\n                  handleChange,\n                  handleBlur,\n                  errors,\n                  touched\n                )}\n                {renderInput(\n                  'password',\n                  'password',\n                  'Password',\n                  values,\n                  handleChange,\n                  handleBlur,\n                  errors,\n                  touched\n                )}\n                <Button\n                  loading={isProcessing}\n                  className=\"SubmitBtn Btn\"\n                  type=\"primary\"\n                  htmlType=\"submit\"\n                >\n                  Log in\n                </Button>\n                <ServerErrors />\n              </Form>\n            )}\n          </Formik>\n          <NavLink to={`${process.env.PUBLIC_URL}/signup`} onClick={resetErrorsFunc}>\n            Signup\n          </NavLink>\n        </div>\n      </>\n    );\n  };\n\n  return renderForm();\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    isAuth: !!state.auth.token,\n    isProcessing: state.auth.isProcessing,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  authFunc: (email, password) => dispatch(auth(email, password)),\n  resetErrorsFunc: () => dispatch(resetErrors()),\n});\n\nAuthForm.propTypes = {\n  authFunc: PropTypes.func,\n  isProcessing: PropTypes.bool,\n  resetErrorsFunc: PropTypes.func,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AuthForm);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { Button } from 'antd';\nimport PropTypes from 'prop-types';\nimport { logOut } from '../../redux/actions/auth';\nimport './UserBio.scss';\n\nconst UserBio = (props) => {\n  const { username, isAuth, logOutFunc } = props;\n\n  const logOutHandler = () => {\n    logOutFunc();\n    localStorage.removeItem('token');\n    localStorage.removeItem('userId');\n  };\n\n  const renderUserBio = () => {\n    return (\n      <>\n        <h1>Home Page</h1>\n        <div className=\"UserBioWrap\">\n          <div className=\"UserBio\">{username}</div>\n          <Button className=\"Btn\" type=\"primary\" onClick={logOutHandler}>\n            Log out\n          </Button>\n        </div>\n      </>\n    );\n  };\n\n  return isAuth ? renderUserBio() : <Redirect to={`${process.env.PUBLIC_URL}/login`} />;\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    username: state.auth.username,\n    isAuth: !!state.auth.token,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return { logOutFunc: () => dispatch(logOut()) };\n};\n\nUserBio.propTypes = {\n  username: PropTypes.string.isRequired,\n  isAuth: PropTypes.bool.isRequired,\n  logOutFunc: PropTypes.func.isRequired,\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(UserBio);\n","import './App.scss';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Route, Switch, Redirect } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport RegForm from './components/RegForm/RegForm';\nimport AuthForm from './components/AuthForm/AuthForm';\nimport UserBio from './components/UserBio/UserBio';\n\nfunction App(props) {\n  const { isAuth } = props;\n\n  if (isAuth) {\n    return (\n      <div className=\"App\">\n        <Switch>\n          <Route path={`${process.env.PUBLIC_URL}/`} component={UserBio} />\n          <Redirect to={`${process.env.PUBLIC_URL}/`} />\n        </Switch>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"App\">\n      <Switch>\n        <Route exact path={`${process.env.PUBLIC_URL}/signup`} component={RegForm} />\n        <Route exact path={`${process.env.PUBLIC_URL}/login`} component={AuthForm} />\n        <Redirect to={`${process.env.PUBLIC_URL}/login`} />\n      </Switch>\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    isAuth: !!state.auth.token,\n  };\n};\n\nApp.propTypes = {\n  isAuth: PropTypes.bool.isRequired,\n};\n\nexport default connect(mapStateToProps)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'antd/dist/antd.css';\nimport './index.scss';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport { BrowserRouter } from 'react-router-dom';\nimport rootReducer from './redux/redusers/rootReduser';\nimport * as serviceWorker from './serviceWorker';\nimport App from './App';\n\nconst composeEnhancers =\n  typeof window === 'object' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n    ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n        // Specify extension’s options like name, actionsBlacklist, actionsCreators, serialize...\n      })\n    : compose;\n\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)));\n\nconst app = (\n  <BrowserRouter>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </BrowserRouter>\n);\n\nReactDOM.render(app, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}